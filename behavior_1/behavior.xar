<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram scale="84.0896"><Box name="Show App" id="2" localization="8" tooltip="Loads the application on the tablet, if it exists, and displays the webview.&#x0A;&#x0A;V1.0.0&#x0A;" x="457" y="19"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.isRunning = False

    def onUnload(self):
        self.isRunning = False

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def onInput_onStart(self):
        if self.isRunning:
            return # already running, nothing to do
        self.isRunning = True
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        appName = self.packageUid()
        state = False
        if appName:
            if tabletService:
                if tabletService.loadApplication(appName):
                    self.logger.info("Successfully set application: %s" % appName)
                    tabletService.showWebview()
                    state = True
                else:
                    self.logger.warning("Got tablet service, but failed to set application: %s" % appName)
            else:
                self.logger.warning("Couldn't find tablet service, so can't set application: %s" % appName)
        else:
            self.logger.error("ERROR: Could not set application: %s" % appName)
        if state:
            self.onSuccess()
        else:
            self.onFailure()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onSuccess" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished successfully." id="3" /><Output name="onFailure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished unsuccessfully." id="4" /></Box><Box name="DisplayInfo Webview" id="8" localization="8" tooltip="Shows the webview (html content) on the tablet.&#x0A;&#x0A;V1.0.0&#x0A;" x="171" y="140"><bitmap>media/images/box/internet/internet.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def onInput_onStart(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()

        # Get the app name
        appName = self.packageUid()

        if appName:
            if tabletService:
                # use default robot IP address from the tablet
                robotIP = "198.18.0.1" # tabletService.getRobotIp()

                # Set page details
                pageHeading = "Hello Joseph"
                pageText = "Welcome to GIN 456"

                # Set the URL
                url = "http://{ip}/apps/{appName}/pages/displayinfo.html?pageHeading={pageHeading}&pageText={pageText}".format(ip=robotIP, appName=appName, pageHeading=pageHeading, pageText=pageText)

                self.logger.info(url)

                # Show the web view on the tablet
                tabletService.showWebview(url)
            else:
                self.logger.warning("Couldn't find tablet service, so can't set application: %s" % appName)

        #
        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Box name="DisplayText Webview" id="3" localization="8" tooltip="Shows the webview (html content) on the tablet.&#x0A;&#x0A;V1.0.0&#x0A;" x="426" y="132"><bitmap>media/images/box/internet/internet.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def onInput_onStart(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        # Get the app name
        appName = self.packageUid()

        if appName:
            if tabletService:
                # use default robot IP address from the tablet
                robotIP = "198.18.0.1" # tabletService.getRobotIp()

                # Set page details
                pageHeading = "Hello"
                pageText = "Welcome to GIN 456"

                # Set the URL
                url = "http://{ip}/apps/{appName}/pages/displaytext.html?pageHeading={pageHeading}&pageText={pageText}".format(ip=robotIP, appName=appName, pageHeading=pageHeading, pageText=pageText)

                self.logger.info(url)

                # Show the web view on the tablet
                tabletService.showWebview(url)
            else:
                self.logger.warning("Couldn't find tablet service, so can't set application: %s" % appName)

        #
        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Box name="DisplayImage Webview" id="4" localization="8" tooltip="Shows the webview (html content) on the tablet.&#x0A;&#x0A;V1.0.0&#x0A;" x="663" y="567"><bitmap>media/images/box/internet/internet.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def onInput_onStart(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        # Get the app name
        appName = self.packageUid()

        if appName:
            if tabletService:
                # use default robot IP address from the tablet
                robotIP = "198.18.0.1" # tabletService.getRobotIp()

                # Set page details
                pageImage = "pepper-question.png"

                # Set the URL
                url = "http://{ip}/apps/{appName}/pages/displayimage.html?pageImage={pageImage}".format(ip=robotIP, appName=appName, pageImage=pageImage)

                self.logger.info(url)

                # Show the web view on the tablet
                tabletService.showWebview(url)
            else:
                self.logger.warning("Couldn't find tablet service, so can't set application: %s" % appName)

        #
        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Box name="Confirmation WebView" id="1" localization="8" tooltip="Shows the webview (html content) on the tablet.&#x0A;&#x0A;V1.0.0&#x0A;" x="642" y="69"><bitmap>media/images/box/internet/internet.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def onInput_onStart(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()

        # Get the app name
        appName = self.packageUid()

        if appName:
            if tabletService:
                # use default robot IP address from the tablet
                robotIP = "198.18.0.1" # tabletService.getRobotIp()

                # Set page details
                pageImage = "pepper-question.png"
                pageHeading = "You now have to decide"
                pageText = "Please select an option"

                # Set the URL
                url = "http://{ip}/apps/{appName}/pages/confirmation.html?pageHeading={pageHeading}&pageText={pageText}&pageImage={pageImage}".format(ip=robotIP, appName=appName, pageHeading=pageHeading, pageText=pageText, pageImage=pageImage)

                self.logger.info(url)

                # Show the web view on the tablet
                tabletService.showWebview(url)
            else:
                self.logger.warning("Couldn't find tablet service, so can't set application: %s" % appName)

        #
        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Box name="Dialog" id="5" localization="8" tooltip="An example of multilanguage dialog implementation" x="338" y="398"><dialogFile>../greetingDialog/greetingDialog.dlg</dialogFile><bitmap>media/images/box/box-dialog.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="greetingOutput" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" /><Output name="roomOutput" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" /><Output name="showImage" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" /><Output name="interviewProcess" type="1" type_size="1" nature="1" inner="0" tooltip="" id="8" /><Output name="movepepper" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" /><Output name="Endprogram" type="3" type_size="1" nature="2" inner="0" tooltip="" id="10" /><Resource name="Speech" type="Lock" timeout="0" /><Resource name="Speech recognition" type="Lock" timeout="0" /></Box><Box name="yes Webview" id="6" localization="8" tooltip="Shows the webview (html content) on the tablet.&#x0A;&#x0A;V1.0.0&#x0A;" x="301" y="32"><bitmap>media/images/box/internet/internet.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def onInput_onStart(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()

        # Get the app name
        appName = self.packageUid()

        if appName:
            if tabletService:
                # use default robot IP address from the tablet
                robotIP = "198.18.0.1" # tabletService.getRobotIp()

                # Set page details
                pageHeading = "Thank you for your feedback"
                pageText = "I am really happy that you liked the interaction"

                # Set the URL
                url = "http://{ip}/apps/{appName}/pages/displayinfo.html?pageHeading={pageHeading}&pageText={pageText}".format(ip=robotIP, appName=appName, pageHeading=pageHeading, pageText=pageText)

                self.logger.info(url)

                # Show the web view on the tablet
                tabletService.showWebview(url)
            else:
                self.logger.warning("Couldn't find tablet service, so can't set application: %s" % appName)

        #
        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /><Parameter name="yesOutput" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="4" /></Box><Box name="no Webview" id="7" localization="8" tooltip="Shows the webview (html content) on the tablet.&#x0A;&#x0A;V1.0.0&#x0A;" x="124" y="0"><bitmap>media/images/box/internet/internet.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def onInput_onStart(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()

        # Get the app name
        appName = self.packageUid()

        if appName:
            if tabletService:
                # use default robot IP address from the tablet
                robotIP = "198.18.0.1" # tabletService.getRobotIp()

                # Set page details
                pageHeading = "Thank you for your feedback"
                pageText = "It is too bad that you did not like the interaction"

                # Set the URL
                url = "http://{ip}/apps/{appName}/pages/displayinfo.html?pageHeading={pageHeading}&pageText={pageText}".format(ip=robotIP, appName=appName, pageHeading=pageHeading, pageText=pageText)

                self.logger.info(url)

                # Show the web view on the tablet
                tabletService.showWebview(url)
            else:
                self.logger.warning("Couldn't find tablet service, so can't set application: %s" % appName)

        #
        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /><Parameter name="noOutput" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="100" tooltip="" id="4" /></Box><Box name="Animated Say" id="11" localization="8" tooltip="Say some text with animations. The text can be localized." x="1146" y="53"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALAnimatedSpeech')
        self.ttsStop = ALProxy('ALAnimatedSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Parameter name="Text" inherits_from_parent="0" content_type="5" value="Goodbye" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" /><Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="disabled" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8"><Choice value="disabled" /><Choice value="random" /><Choice value="contextual" /></Parameter><Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_1" default_value="" custom_choice="0" tooltip="The animation to play" id="9" /></Box><Box name="Intro" id="12" localization="8" tooltip="Say some text with animations. The text can be localized." x="128" y="391"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALAnimatedSpeech')
        self.ttsStop = ALProxy('ALAnimatedSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="90" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="89" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Parameter name="Text" inherits_from_parent="0" content_type="5" value="" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" /><Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8"><Choice value="disabled" /><Choice value="random" /><Choice value="contextual" /></Parameter><Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_6" default_value="" custom_choice="0" tooltip="The animation to play" id="9" /></Box><Box name="Greeting web view" id="9" localization="8" tooltip="Shows the webview (html content) on the tablet.&#x0A;&#x0A;V1.0.0&#x0A;" x="755" y="183"><bitmap>media/images/box/internet/internet.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def onInput_onStart(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()

        # Get the app name
        appName = self.packageUid()

        if appName:
            if tabletService:
                # use default robot IP address from the tablet
                robotIP = "198.18.0.1" # tabletService.getRobotIp()

                # Set page details
                pageImage = "pepper-question.png"
                pageHeading = "You now have to decide"
                pageText = "Please select an option"

                # Set the URL
                url = "http://{ip}/apps/{appName}/pages/showGreeting.html?pageHeading={pageHeading}&pageText={pageText}&pageImage={pageImage}".format(ip=robotIP, appName=appName, pageHeading=pageHeading, pageText=pageText, pageImage=pageImage)

                self.logger.info(url)

                # Show the web view on the tablet
                tabletService.showWebview(url)
            else:
                self.logger.warning("Couldn't find tablet service, so can't set application: %s" % appName)

        #
        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Box name="Room Web view" id="14" localization="8" tooltip="Shows the webview (html content) on the tablet.&#x0A;&#x0A;V1.0.0&#x0A;" x="758" y="303"><bitmap>media/images/box/internet/internet.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def onInput_onStart(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()

        # Get the app name
        appName = self.packageUid()

        if appName:
            if tabletService:
                # use default robot IP address from the tablet
                robotIP = "198.18.0.1" # tabletService.getRobotIp()

                # Set page details
                pageImage = "pepper-question.png"
                pageHeading = "You now have to decide"
                pageText = "Please select an option"

                # Set the URL
                url = "http://{ip}/apps/{appName}/pages/showRoom.html?pageHeading={pageHeading}&pageText={pageText}&pageImage={pageImage}".format(ip=robotIP, appName=appName, pageHeading=pageHeading, pageText=pageText, pageImage=pageImage)

                self.logger.info(url)

                # Show the web view on the tablet
                tabletService.showWebview(url)
            else:
                self.logger.warning("Couldn't find tablet service, so can't set application: %s" % appName)

        #
        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Box name="Show Image" id="20" localization="8" tooltip="display an image on the screen&#x0A;&#x0A;V1.0.0&#x0A;" x="775" y="528"><bitmap>media/images/box/interaction/rec_movie.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def _getAbsoluteUrl(self, partial_url):
        import os
        subPath = os.path.join(self.packageUid(), os.path.normpath(partial_url).lstrip("\\/"))
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        return "http://%s/apps/%s" %(self._getTabletService().robotIp(), subPath.replace(os.path.sep, "/"))

    def onInput_showImage(self, url):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                if url == '':
                    self.logger.error("URL of the image is empty")
                if not url.startswith('http'):
                    url = self._getAbsoluteUrl(url)
                tabletService.showImage(url)
            except Exception as err:
                self.logger.error("Error during ShowImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't display the image.")
            self.onStopped()

    def onInput_onHideImage(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                tabletService.hideImage()
            except Exception as err:
                self.logger.error("Error during HideImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't hide the image.")
            self.onStopped()

    def onInput_onPreLoadImage(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                partialUrl = self.getParameter("ImageUrl")
                fullUrl = self._getAbsoluteUrl(partialUrl)
                tabletService.preLoadImage(fullUrl)
            except Exception as err:
                self.logger.warning("Error during preLoadImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't preload the image.")
            self.onStopped()

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="showImage" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="onHideImage" type="1" type_size="1" nature="1" inner="0" tooltip="Hide the image when a signal is received on this input." id="4" /><Input name="onPreLoadImage" type="1" type_size="1" nature="1" inner="0" tooltip="Preload the image when a signal is received on this input." id="5" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" /></Box><Box name="Interview" id="21" localization="8" tooltip="Enter description here" x="770" y="678"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="interviewProcess" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" /><Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" /><Output name="endProgram" type="3" type_size="1" nature="2" inner="0" tooltip="" id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="BasicQuestion1" id="16" localization="8" tooltip="Shows the webview (html content) on the tablet.&#x0A;&#x0A;V1.0.0&#x0A;" x="760" y="82"><bitmap>media/images/box/internet/internet.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)
    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:

            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def onInput_onStart(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()

        # Get the app name
        appName = self.packageUid()

        if appName:
            if tabletService:
                # use default robot IP address from the tablet
                robotIP = "198.18.0.1" # tabletService.getRobotIp()

                # Set page details
                pageImage = "pepper-question.png"
                pageHeading = "You now have to decide"
                pageText = "Please select an option"

                # Set the URL
                url = "http://{ip}/apps/{appName}/pages/basicQuestions1.html?pageHeading={pageHeading}&pageText={pageText}&pageImage={pageImage}".format(ip=robotIP, appName=appName, pageHeading=pageHeading, pageText=pageText, pageImage=pageImage)

                self.logger.info(url)

                # Show the web view on the tablet
                tabletService.showWebview(url)
            else:
                self.logger.warning("Couldn't find tablet service, so can't set application: %s" % appName)

        #
        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Box name="Dialog" id="19" localization="8" tooltip="An example of multilanguage dialog implementation" x="142" y="104"><dialogFile>../interviewProcess/interviewProcess.dlg</dialogFile><bitmap>media/images/box/box-dialog.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="playAGame" type="1" type_size="1" nature="2" inner="0" tooltip="stimulated using $playAGame=1 in qiChat script when User wants to play a game&#x0A;" id="5" /><Output name="quizoutput1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" /><Output name="quizoutput2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" /><Output name="quizoutput3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" /><Output name="quizoutput4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" /><Output name="endInterview" type="1" type_size="1" nature="1" inner="0" tooltip="" id="10" /><Output name="endProgram" type="3" type_size="1" nature="2" inner="0" tooltip="" id="11" /><Resource name="Speech" type="Lock" timeout="0" /><Resource name="Speech recognition" type="Lock" timeout="0" /></Box><Box name="BasicQuestion2" id="13" localization="8" tooltip="Shows the webview (html content) on the tablet.&#x0A;&#x0A;V1.0.0&#x0A;" x="763" y="193"><bitmap>media/images/box/internet/internet.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def onInput_onStart(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()

        # Get the app name
        appName = self.packageUid()

        if appName:
            if tabletService:
                # use default robot IP address from the tablet
                robotIP = "198.18.0.1" # tabletService.getRobotIp()

                # Set page details
                pageImage = "pepper-question.png"
                pageHeading = "You now have to decide"
                pageText = "Please select an option"

                # Set the URL
                url = "http://{ip}/apps/{appName}/pages/basicQuestions2.html?pageHeading={pageHeading}&pageText={pageText}&pageImage={pageImage}".format(ip=robotIP, appName=appName, pageHeading=pageHeading, pageText=pageText, pageImage=pageImage)

                self.logger.info(url)

                # Show the web view on the tablet
                tabletService.showWebview(url)
            else:
                self.logger.warning("Couldn't find tablet service, so can't set application: %s" % appName)

        #
        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Box name="BasicQuestion3" id="17" localization="8" tooltip="Shows the webview (html content) on the tablet.&#x0A;&#x0A;V1.0.0&#x0A;" x="761" y="293"><bitmap>media/images/box/internet/internet.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def onInput_onStart(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()

        # Get the app name
        appName = self.packageUid()

        if appName:
            if tabletService:
                # use default robot IP address from the tablet
                robotIP = "198.18.0.1" # tabletService.getRobotIp()

                # Set page details
                pageImage = "pepper-question.png"
                pageHeading = "You now have to decide"
                pageText = "Please select an option"

                # Set the URL
                url = "http://{ip}/apps/{appName}/pages/basicQuestions3.html?pageHeading={pageHeading}&pageText={pageText}&pageImage={pageImage}".format(ip=robotIP, appName=appName, pageHeading=pageHeading, pageText=pageText, pageImage=pageImage)

                self.logger.info(url)

                # Show the web view on the tablet
                tabletService.showWebview(url)
            else:
                self.logger.warning("Couldn't find tablet service, so can't set application: %s" % appName)

        #
        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Box name="BasicQuestions4" id="18" localization="8" tooltip="Shows the webview (html content) on the tablet.&#x0A;&#x0A;V1.0.0&#x0A;" x="764" y="399"><bitmap>media/images/box/internet/internet.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def onInput_onStart(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()

        # Get the app name
        appName = self.packageUid()

        if appName:
            if tabletService:
                # use default robot IP address from the tablet
                robotIP = "198.18.0.1" # tabletService.getRobotIp()

                # Set page details
                pageImage = "pepper-question.png"
                pageHeading = "You now have to decide"
                pageText = "Please select an option"

                # Set the URL
                url = "http://{ip}/apps/{appName}/pages/basicQuestions4.html?pageHeading={pageHeading}&pageText={pageText}&pageImage={pageImage}".format(ip=robotIP, appName=appName, pageHeading=pageHeading, pageText=pageText, pageImage=pageImage)

                self.logger.info(url)

                # Show the web view on the tablet
                tabletService.showWebview(url)
            else:
                self.logger.warning("Couldn't find tablet service, so can't set application: %s" % appName)

        #
        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="16" indexofinput="2" outputowner="19" indexofoutput="6" /><Link inputowner="13" indexofinput="2" outputowner="19" indexofoutput="7" /><Link inputowner="17" indexofinput="2" outputowner="19" indexofoutput="8" /><Link inputowner="18" indexofinput="2" outputowner="19" indexofoutput="9" /><Link inputowner="19" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="3" outputowner="19" indexofoutput="10" /><Link inputowner="0" indexofinput="4" outputowner="19" indexofoutput="11" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="Walk Toward" id="13" localization="8" tooltip="Make the robot walk in the direction you set in parameters.&#x0A;&#x0A;!!Warning!! the robot will not stop walking by himself. You need to either set x, y and theta to 0 or stop the box to stop him.&#x0A;&#x0A;Note: You can set the period of walk direction update in parameters." x="199" y="651"><bitmap>media/images/box/movement/walk_forward.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self):
        pass

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Parameter name="X" inherits_from_parent="0" content_type="2" value="0.5" default_value="0.5" min="-1" max="1" tooltip="Omnidirectional walk vector control for forward/backward motion. It corresponds&#x0A;to forward/backward step length. Two particular values:&#x0A;* 1.0 which is the maximum forward.&#x0A;* -1.0 which is the maximum backward." id="4" /><Parameter name="Y" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Omnidirectional walk vector control for lateral motion. It corresponds to lateral&#x0A;step length. Two particular values:&#x0A;* 1.0 which is the maximum on the left.&#x0A;* -1.0 which is the maximum on the right." id="5" /><Parameter name="Theta" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Omnidirectional walk vector control for rotation motion. It corresponds to&#x0A;rotational step length. Two particular values:&#x0A;* 1.0 which is the maximum for anticlockwise rotation.&#x0A;* -1.0 which is the maximum for clockwise rotation." id="6" /><Parameter name="Step frequency" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="Omnidirectional walk vector control for walking speed. Two particular values:&#x0A;* 0.0 which is the minimum speed.&#x0A;* 1.0 which is the maximum speed." id="7" /><Parameter name="Left arm enabled" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Activate left arm motion during the walk to make it more realistic." id="8" /><Parameter name="Right arm enabled" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Activate right arm motion during the walk to make it more realistic." id="9" /><Parameter name="Stop walk when foot contact is lost" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="If this option is activated, the robot stops walking when he loses foot contact with&#x0A;the ground, and starts walking again when he recovers it. Else, he just keeps walking&#x0A;anyway." id="10" /><Parameter name="Period of direction update (s)" inherits_from_parent="0" content_type="2" value="0.5" default_value="0.5" min="0.1" max="1" tooltip="The walk direction is regularly updated. This parameter sets how regularly it is." id="11" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Give direction" id="1" localization="8" tooltip="Get the walk direction from parent box and return it in order to control the Update Direction&#x0A;box." x="151" y="38"><bitmap>media/images/box/sensors/inertial_unit.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        import threading
        self.ptask = qi.PeriodicTask()
        self.lock = threading.RLock()

    def onUnload(self):
        with self.lock:
            self.ptask.stop()
            self.outputX(0.0)
            self.outputY(0.0)
            self.outputTheta(0.0)

    def onInput_onStart(self):
        with self.lock:
            period = self.getParameter("Period of direction update (s)")
            us_period = int(period*1000000)
            self.ptask.compensateCallbackTime(True)
            self.ptask.setCallback(self.update)
            self.ptask.setUsPeriod(us_period)
            self.ptask.start(True)

    def update(self):
        with self.lock:
            self.outputX(self.getParameter("X"))
            self.outputY(self.getParameter("Y"))
            self.outputTheta(self.getParameter("Theta"))
            self.outputStepFrequency(self.getParameter("Step frequency"))

            period = self.getParameter("Period of direction update (s)")
            us_period = int(period*1000000)
            self.ptask.setUsPeriod(us_period)

    def onInput_onStop(self):
        with self.lock:
            self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="outputX" type="2" type_size="1" nature="2" inner="0" tooltip="The new forward/backward motion value." id="4" /><Output name="outputY" type="2" type_size="1" nature="2" inner="0" tooltip="The new lateral motion value." id="5" /><Output name="outputTheta" type="2" type_size="1" nature="2" inner="0" tooltip="The new rotational motion value." id="6" /><Output name="outputStepFrequency" type="2" type_size="1" nature="2" inner="0" tooltip="The new walking speed value." id="7" /><Parameter name="Step frequency" inherits_from_parent="1" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="8" /><Parameter name="Theta" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="" id="9" /><Parameter name="Period of direction update (s)" inherits_from_parent="1" content_type="2" value="0.5" default_value="0.5" min="0.1" max="1" tooltip="" id="10" /><Parameter name="X" inherits_from_parent="1" content_type="2" value="0.5" default_value="0.5" min="-1" max="1" tooltip="" id="11" /><Parameter name="Y" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="" id="12" /></Box><Box name="Update Direction" id="3" localization="8" tooltip="Update the walk direction.&#x0A;&#x0A;!!Warning!! the robot will not stop walking by himself. You need to either set x, y and theta to 0 or stop the box." x="355" y="28"><bitmap>media/images/box/movement/walk_forward.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        footGaitConfigMin = self.motion.getMoveConfig("Min")
        footGaitConfigMax = self.motion.getMoveConfig("Max")
        self.dFootGaitConfig = {}
        for i in range(len(footGaitConfigMin)):
            # [0] = key ("MaxStepX" for ex)
            # [1] = min
            # [2] = max
            self.dFootGaitConfig[footGaitConfigMin[i][0]] = [footGaitConfigMin[i][1], footGaitConfigMax[i][1]]

    def onLoad(self):
        self.x = 0.0
        self.y = 0.0
        self.theta = 0.0
        self.stepFrequency = 0.0
        self.enableArms = []
        self.enableFootContact = None
        self.bIsRunning = False

    def onUnload(self):
        self.motion.stopMove()
        self.bIsRunning = False

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()

    def onInput_x(self, p):
        self.bIsRunning = True
        self.x = p
        self.sendNewWalkTarget()

    def onInput_y(self, p):
        self.bIsRunning = True
        self.y = p
        self.sendNewWalkTarget()

    def onInput_theta(self, p):
        self.bIsRunning = True
        self.theta = p
        self.sendNewWalkTarget()

    def onInput_stepFrequency(self, p):
        self.stepFrequency = p
        self.sendNewWalkTarget()

    def initializeWalk(self):
        enableArms = [self.getParameter("Left arm enabled"),
                              self.getParameter("Right arm enabled")]
        enableFootContact = self.getParameter("Stop walk when foot contact is lost")
        for k, v in self.dFootGaitConfig.iteritems():
            for unit in ["m", "rad", "%"]:
                try: # try for each unit and do nothing if value in gaitConfig but not in parameters
                    param = self.getParameter( str(k) + " (" + unit + ")" )
                    if( unit == "%" ):
                        param = param / 100.
                    if( len(v) == 2 ):
                        v.append( param )
                    else:
                        v[2] = param
                    break
                except:
                    pass
        if( self.enableArms != enableArms ):
            self.enableArms = enableArms
            self.motion.setMoveArmsEnabled( self.enableArms[0], self.enableArms[1] )
        if( self.enableFootContact != enableFootContact ):
            self.enableFootContact = enableFootContact
            self.motion.setMotionConfig([["ENABLE_FOOT_CONTACT_PROTECTION",self.enableFootContact]])

    def sendNewWalkTarget(self):
        self.initializeWalk()
        moveConfig = []
        for k, v in self.dFootGaitConfig.iteritems():
            try:
                moveConfig.append( [k, v[2]] )
            except: # if some value added in moveConfig but not in parameters
                pass
        moveConfig.append( ["Frequency", self.stepFrequency] )
        self.motion.moveToward(self.x, self.y, self.theta, moveConfig)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="x" type="2" type_size="1" nature="2" inner="0" tooltip="Omnidirectional walk vector control for forward/backward motion. It corresponds&#x0A;to forward/backward step length. Two particular values:&#x0A;* 1.0 which is the maximum forward.&#x0A;* -1.0 which is the maximum backward." id="2" /><Input name="y" type="2" type_size="1" nature="2" inner="0" tooltip="Omnidirectional walk vector control for lateral motion. It corresponds to lateral&#x0A;step length. Two particular values:&#x0A;* 1.0 which is the maximum on the left.&#x0A;* -1.0 which is the maximum on the right." id="3" /><Input name="theta" type="2" type_size="1" nature="2" inner="0" tooltip="Omnidirectional walk vector control for rotation motion. It corresponds to&#x0A;rotational step length. Two particular values:&#x0A;* 1.0 which is the maximum for anticlockwise rotation.&#x0A;* -1.0 which is the maximum for clockwise rotation." id="4" /><Input name="stepFrequency" type="2" type_size="1" nature="1" inner="0" tooltip="Omnidirectional walk vector control for walking speed. Two particular values:&#x0A;* 0.0 which is the minimum speed.&#x0A;* 1.0 which is the maximum speed." id="5" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="6" /><Parameter name="Left arm enabled" inherits_from_parent="1" content_type="0" value="1" default_value="1" tooltip="Activate left arm motion during the walk to make it more realistic." id="7" /><Parameter name="Right arm enabled" inherits_from_parent="1" content_type="0" value="1" default_value="1" tooltip="Activate right arm motion during the walk to make it more realistic." id="8" /><Parameter name="Stop walk when foot contact is lost" inherits_from_parent="1" content_type="0" value="1" default_value="1" tooltip="If this option is activated, the robot stops walking when he loses foot contact with&#x0A;the ground, and starts walking again when he recovers it. Else, he just keeps walking&#x0A;anyway." id="9" /><Parameter name="MaxStepX (m)" inherits_from_parent="0" content_type="2" value="0.04" default_value="0.04" min="0.001" max="0.06" tooltip='Maximum length of forward/backward step.&#x0A;&#x0A;Note: The actual step length is the value of the maximum length &quot;MaxStepX&quot;&#x0A;multiplied by the value of the ratio parameter &quot;X&quot;:&#x0A;ActualX (m) = MaxStepX (m) * X' id="10" /><Parameter name="MaxStepY (m)" inherits_from_parent="0" content_type="2" value="0.14" default_value="0.14" min="0.101" max="0.16" tooltip='Maximum length of lateral step.&#x0A;&#x0A;Note: The actual step length is the value of the maximum length &quot;MaxStepY&quot;&#x0A;multiplied by the value of the ratio parameter &quot;Y&quot;:&#x0A;ActualY (m) = MaxStepY (m) * Y' id="11" /><Parameter name="MaxStepTheta (rad)" inherits_from_parent="0" content_type="2" value="0.349065" default_value="0.349065" min="0.001" max="0.523598" tooltip='Maximum length of rotational step.&#x0A;&#x0A;Note: The actual step length is the value of the maximum length &quot;MaxStepTheta&quot;&#x0A;multiplied by the value of the ratio parameter &quot;Theta&quot;:&#x0A;ActualTheta (rad) = MaxStepTheta (rad) * Theta' id="12" /><Parameter name="MaxStepFrequency (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip='Maximum step frequency.&#x0A;&#x0A;Note: The actual step frequency is the value of the maximum step frequency&#x0A;&quot;MaxStepFrequency&quot; multiplied by the value of the ratio parameter &quot;StepFrequency&quot;:&#x0A;ActualStepFrequency = MaxStepFrequency (%) / 100 * StepFrequency' id="13" /><Parameter name="StepHeight (m)" inherits_from_parent="0" content_type="2" value="0.02" default_value="0.02" min="0.005" max="0.04" tooltip="Height of the step i.e. how high the robot put his feet up during the walk." id="14" /><Parameter name="TorsoWx (rad)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-0.122173" max="0.122173" tooltip="Lateral angle of the torso during the walk.&#x0A;&#x0A;Note: A positive value means that the robot will be tilted to the right. A negative&#x0A;value means he is tilted to the left." id="15" /><Parameter name="TorsoWy (rad)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-0.122173" max="0.122173" tooltip="Angle of the torso toward forward/backward during the walk.&#x0A;&#x0A;Note: A positive value means that the robot will be inclined forward. A negative&#x0A;value means he is inclined backward." id="16" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="4" /><Link inputowner="3" indexofinput="3" outputowner="1" indexofoutput="5" /><Link inputowner="3" indexofinput="4" outputowner="1" indexofoutput="6" /><Link inputowner="3" indexofinput="5" outputowner="1" indexofoutput="7" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline><Resource name="Legs" type="Lock" timeout="0" /></Box><Box name="Move Along" id="16" localization="8" tooltip="Move along a trajectory given by an attached .pmt file.&#x0A;&#x0A;V1.0.0&#x0A;" x="221" y="801"><bitmap>media/images/box/movement/walk_forward.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.motion = ALProxy("ALMotion")
        self.navigation = ALProxy("ALNavigation")

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.move(0., 0., 0.)

    def onInput_onStart(self):
        relativePath = self.getParameter("Planar Move Trajectory")
        if len(relativePath) == 0:
            self.failure()
            return

        behaviorPath = self.behaviorAbsolutePath()
        trajectoryPath = behaviorPath + relativePath

        trajectoryData = str()
        with open(trajectoryPath, 'r') as trajectoryFile:
            trajectoryData = trajectoryFile.read()
        trajectory = eval(trajectoryData)

        if trajectory[0] != "Composed": # dealing with trajectories with radius
            trajectory = trajectory[0]

        result = self.navigation.moveAlong(trajectory)
        if (result):
            self.success()
        else:
            self.failure()

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the trajectory was correctly executed." id="4" /><Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the trajectory was stopped to avoid collisions." id="5" /><Parameter name="Planar Move Trajectory" inherits_from_parent="0" content_type="4" value="" default_value="" tooltip="" id="6" /></Box><Box name="ShowFarDistanceLeft_01 (1)" id="18" localization="8" tooltip="ID : #01A 0015&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- There&#x0A;- Future&#x0A;- Left&#x0A;- Far&#x0A;&#x0A;===================&#x0A;&#x0A;Common dialog : No&#x0A;&#x0A;===================&#x0A;&#x0A;Start stance : LeanRight&#x0A;End stance : LeanRight" x="635" y="452"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="45"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="20" value="16.697" /><Key frame="32" value="-7.91266" /><Key frame="44" value="-5.10013" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="20" value="19.2459" /><Key frame="32" value="17.6638" /><Key frame="44" value="17.8396" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="19" value="-17.3846" /><Key frame="33" value="-3.89231" /><Key frame="44" value="-2.82189" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="19" value="-3.8822" /><Key frame="33" value="6.00665" /><Key frame="44" value="6.00665" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="19" value="8.95096" /><Key frame="33" value="-0.225453" /><Key frame="44" value="-0.798824" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="23" value="-88.5" /><Key frame="33" value="-24.1678" /><Key frame="45" value="-34.4511" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="23" value="-59.4172" /><Key frame="33" value="-102.484" /><Key frame="45" value="-96.5954" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="23" value="0.02" /><Key frame="33" value="0.84" /><Key frame="45" value="0.68" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="23" value="-10.2857" /><Key frame="33" value="20.6522" /><Key frame="45" value="18.7185" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="23" value="30.074" /><Key frame="33" value="45.1034" /><Key frame="45" value="42.994" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="23" value="-0.529749" /><Key frame="33" value="-32.0829" /><Key frame="45" value="-28.743" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="18" value="80.8679" /><Key frame="31" value="36.5581" /><Key frame="43" value="60.2134" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="18" value="73.0479" /><Key frame="31" value="85.0336" /><Key frame="43" value="110.092" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="18" value="0" /><Key frame="31" value="0.84" /><Key frame="43" value="0.68" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="18" value="85.0816" /><Key frame="31" value="83.6753" /><Key frame="43" value="87.191" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="18" value="-20.5383" /><Key frame="31" value="-14.298" /><Key frame="43" value="-16.0559" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="18" value="26.6288" /><Key frame="31" value="25.0467" /><Key frame="43" value="25.7499" /></ActuatorCurve></ActuatorList></Timeline><Resource name="Standing" type="Lock" timeout="1" /><Resource name="All motors" type="Lock" timeout="1" /></Box><Box name="Move To (1)" id="19" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="773" y="418"><bitmap>media/images/box/movement/walk_forward.png</bitmap><script language="4"><content><![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos
            and abs(positionError.y) < self.positionErrorThresholdPos
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" /><Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" /><Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="2" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" /><Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" /><Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" /><Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Enables natural motion of the arms." id="9" /><Resource name="Legs" type="Lock" timeout="0" /></Box><Box name="Motor On/Off" id="15" localization="8" tooltip="Stiffen or loosen all motors." x="118" y="546"><bitmap>media/images/box/movement/stiffness.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.motion = ALProxy("ALMotion")

    def onUnload(self):
        pass

    def onInput_onSet(self):
        if( self.getParameter("Action") == "On" ):
            stiffness = 1
        else:
            stiffness = 0
        self.motion.post.stiffnessInterpolation("Body", stiffness, 0.1)
        time.sleep(0.1)
        self.onReady() #~ activate output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="When this input is stimulated, all motors are stiffened or loosened." id="2" /><Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when it is done." id="3" /><Parameter name="Action" inherits_from_parent="0" content_type="3" value="On" default_value="On" custom_choice="0" tooltip="Choose if you want to stiffen (On) or loosen (Off) all motors." id="4"><Choice value="Off" /><Choice value="On" /></Parameter><Resource name="All motors" type="Lock" timeout="0" /></Box><Box name="Interview exam" id="10" localization="8" tooltip="Enter description here" x="987" y="678"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="interviewProcess" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" /><Output name="output" type="3" type_size="1" nature="2" inner="0" tooltip="" id="3" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="BasicQuestion1" id="16" localization="8" tooltip="Shows the webview (html content) on the tablet.&#x0A;&#x0A;V1.0.0&#x0A;" x="760" y="90"><bitmap>media/images/box/internet/internet.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)
    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:

            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def onInput_onStart(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()

        # Get the app name
        appName = self.packageUid()

        if appName:
            if tabletService:
                # use default robot IP address from the tablet
                robotIP = "198.18.0.1" # tabletService.getRobotIp()

                # Set page details
                pageImage = "pepper-question.png"
                pageHeading = "You now have to decide"
                pageText = "Please select an option"

                # Set the URL
                url = "http://{ip}/apps/{appName}/pages/basicQuestions1.html?pageHeading={pageHeading}&pageText={pageText}&pageImage={pageImage}".format(ip=robotIP, appName=appName, pageHeading=pageHeading, pageText=pageText, pageImage=pageImage)

                self.logger.info(url)

                # Show the web view on the tablet
                tabletService.showWebview(url)
            else:
                self.logger.warning("Couldn't find tablet service, so can't set application: %s" % appName)

        #
        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Box name="Dialog" id="19" localization="8" tooltip="An example of multilanguage dialog implementation" x="142" y="104"><dialogFile>../quiz/quiz.dlg</dialogFile><bitmap>media/images/box/box-dialog.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="playAGame" type="1" type_size="1" nature="2" inner="0" tooltip="stimulated using $playAGame=1 in qiChat script when User wants to play a game&#x0A;" id="5" /><Output name="quizoutput1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" /><Output name="quizoutput2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" /><Output name="quizoutput3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" /><Output name="quizoutput4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" /><Output name="endExam" type="3" type_size="1" nature="2" inner="0" tooltip="" id="10" /><Resource name="Speech" type="Lock" timeout="0" /><Resource name="Speech recognition" type="Lock" timeout="0" /></Box><Box name="BasicQuestion2" id="13" localization="8" tooltip="Shows the webview (html content) on the tablet.&#x0A;&#x0A;V1.0.0&#x0A;" x="763" y="193"><bitmap>media/images/box/internet/internet.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def onInput_onStart(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()

        # Get the app name
        appName = self.packageUid()

        if appName:
            if tabletService:
                # use default robot IP address from the tablet
                robotIP = "198.18.0.1" # tabletService.getRobotIp()

                # Set page details
                pageImage = "pepper-question.png"
                pageHeading = "You now have to decide"
                pageText = "Please select an option"

                # Set the URL
                url = "http://{ip}/apps/{appName}/pages/basicQuestions2.html?pageHeading={pageHeading}&pageText={pageText}&pageImage={pageImage}".format(ip=robotIP, appName=appName, pageHeading=pageHeading, pageText=pageText, pageImage=pageImage)

                self.logger.info(url)

                # Show the web view on the tablet
                tabletService.showWebview(url)
            else:
                self.logger.warning("Couldn't find tablet service, so can't set application: %s" % appName)

        #
        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Box name="BasicQuestion3" id="17" localization="8" tooltip="Shows the webview (html content) on the tablet.&#x0A;&#x0A;V1.0.0&#x0A;" x="761" y="293"><bitmap>media/images/box/internet/internet.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def onInput_onStart(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()

        # Get the app name
        appName = self.packageUid()

        if appName:
            if tabletService:
                # use default robot IP address from the tablet
                robotIP = "198.18.0.1" # tabletService.getRobotIp()

                # Set page details
                pageImage = "pepper-question.png"
                pageHeading = "You now have to decide"
                pageText = "Please select an option"

                # Set the URL
                url = "http://{ip}/apps/{appName}/pages/basicQuestions3.html?pageHeading={pageHeading}&pageText={pageText}&pageImage={pageImage}".format(ip=robotIP, appName=appName, pageHeading=pageHeading, pageText=pageText, pageImage=pageImage)

                self.logger.info(url)

                # Show the web view on the tablet
                tabletService.showWebview(url)
            else:
                self.logger.warning("Couldn't find tablet service, so can't set application: %s" % appName)

        #
        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Box name="BasicQuestions4" id="18" localization="8" tooltip="Shows the webview (html content) on the tablet.&#x0A;&#x0A;V1.0.0&#x0A;" x="764" y="399"><bitmap>media/images/box/internet/internet.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def onInput_onStart(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()

        # Get the app name
        appName = self.packageUid()

        if appName:
            if tabletService:
                # use default robot IP address from the tablet
                robotIP = "198.18.0.1" # tabletService.getRobotIp()

                # Set page details
                pageImage = "pepper-question.png"
                pageHeading = "You now have to decide"
                pageText = "Please select an option"

                # Set the URL
                url = "http://{ip}/apps/{appName}/pages/basicQuestions4.html?pageHeading={pageHeading}&pageText={pageText}&pageImage={pageImage}".format(ip=robotIP, appName=appName, pageHeading=pageHeading, pageText=pageText, pageImage=pageImage)

                self.logger.info(url)

                # Show the web view on the tablet
                tabletService.showWebview(url)
            else:
                self.logger.warning("Couldn't find tablet service, so can't set application: %s" % appName)

        #
        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="16" indexofinput="2" outputowner="19" indexofoutput="6" /><Link inputowner="13" indexofinput="2" outputowner="19" indexofoutput="7" /><Link inputowner="17" indexofinput="2" outputowner="19" indexofoutput="8" /><Link inputowner="18" indexofinput="2" outputowner="19" indexofoutput="9" /><Link inputowner="19" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="3" outputowner="19" indexofoutput="10" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Link inputowner="0" indexofinput="4" outputowner="11" indexofoutput="4" /><Link inputowner="9" indexofinput="2" outputowner="5" indexofoutput="5" /><Link inputowner="14" indexofinput="2" outputowner="5" indexofoutput="6" /><Link inputowner="5" indexofinput="2" outputowner="12" indexofoutput="4" /><Link inputowner="21" indexofinput="2" outputowner="5" indexofoutput="8" /><Link inputowner="19" indexofinput="2" outputowner="18" indexofoutput="4" /><Link inputowner="18" indexofinput="2" outputowner="5" indexofoutput="9" /><Link inputowner="10" indexofinput="2" outputowner="21" indexofoutput="3" /><Link inputowner="11" indexofinput="2" outputowner="10" indexofoutput="3" /><Link inputowner="11" indexofinput="2" outputowner="21" indexofoutput="4" /><Link inputowner="12" indexofinput="2" outputowner="0" indexofoutput="2" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>